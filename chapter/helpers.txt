= Helpers

Helpers are modules for inclusion into controllers or other classes.

== Using helpers

[source,ruby]
--------------------------------------------------------------------------------
class MainController < Ramaze::Controller
  helper :formatting

  def index
    number_format(rand)
  end
end
--------------------------------------------------------------------------------

== Rules for helpers

Ramaze specifies a clear distinction between normal modules and helper modules.
Most of the difference is in the way Ramaze will treat helpers on action lookup.

=== Helper methods

Methods of helpers are not considered for actions unless they are public and
the module was added to the `Ramaze::Helper::LOOKUP` Set.

== Default helpers

Ramaze comes with a small selection of default helpers deemed essential for any
application.
The major difference is that you will not have to explicitly state their usage,
they will be available by default.

The helpers available by default are following:

* Aspect
* CGI
* Flash
* Link
* Redirect
* Render
* SendFile

We will cover each of them in more detail below, but first let's take a look at
creating your own helper so you can get a feeling for them.

== Creating helpers

Creating helpers is simple.

[source,ruby]
--------------------------------------------------------------------------------
module Ramaze
  module Helper
    module SimleyHelper
      FACES = {
        ':)' => '/smilies/smile.gif'
        ';)' => '/smilies/twink.gif'
      }
      REGEX = Regexp.union(*FACES.keys)

      def smile(string)
        string.gsub(REGEX){ FACES[$1] }
      end
    end
  end
end
--------------------------------------------------------------------------------

=== Exposing helper methods to action lookup

By adding an helper module to the `Ramaze::Helper::LOOKUP` it's possible to add
the module to the lookup for methods together with the `Ramaze::Controller`.

Conflicts of method names in Helper and Controller will prefer the Controller,
following the same rules as Ruby inheritance. 


[source,ruby]
--------------------------------------------------------------------------------
module Ramaze
  module Helper
    module Locale
      LOOKUP << self

      def locale(name)
        session[:LOCALE] = name
      end
    end
  end
end
--------------------------------------------------------------------------------


In this example we expose the public method Locale#locale (Ruby methods are
public by default). So in your application your can just use the helper and
when the client visits the /locale/en route the session will reflect this
choice.

Please note that this code doesn't include a `redirect_referrer` call since we
may be using it within our own code in the middle of a method.

== Aspect helper

The Aspect helper provides you with functionality known from AOP (Aspect
Oriented Programming). Sometimes you just want to execute some code around the
execution of an Action without the Action being aware of it.
Examples for this include authentication, logging, persistence, and routing.

The helper provides you with four methods, symmetrical in functionality.

=== Using before_all

So you have a Controller that requires a user to be administrator in order to
be allowed to do anything.

This might look like:

[source,ruby]
--------------------------------------------------------------------------------
class AdminController < Ramaze::Controller
  def create_user(name)
    # ...
  end

  def delete_user(name)
    # ...
  end

  before_all{ redirect_referrer unless user_is_root? }

  private

  def user_is_root?
    session[:user_is_root]
  end
end
--------------------------------------------------------------------------------

== CGI helper

The CGI helper provides shortcuts to methods commonly used to deal with
escaping and unescaping text for different contexts.

The name originated from the CGI module it utilized to provide it's
functionality.
Today there is only one method that isn't commonly used, left that calls the
CGI module.

There are four symmetric methods to deal with escaping and unescaping HTML and
URIs, and one method to escape text for usage in templates.

In common applications, the most prevalent method might be `h`, an alias for
`html_and_code_escape`.

All methods of the CGI Helper may be accessed directly as module-functions as
well.

=== Encoding text for use in URIs with url_encode

The set of allowed ASCII characters in an URI is very limited.
When you want to create an URI, you have to take special care to avoid using
characters that have special meaning and encode them properly.

For example, let's see how we can put 'Innate & Ramaze' into a query parameter
in the following IRB session:

[source,ruby]
--------------------------------------------------------------------------------
require 'ramaze'

name = Innate::Helper::CGI.url_encode('Innate & Ramaze')
# "Innate+%26+Ramaze"
uri = URI("http://google.com/search?q=#{name}")
# #<URI::HTTP:0xb7492bb0 URL:http://google.com/search?q=Innate+%26+Ramaze>
puts uri
http://google.com/search?q=Innate+%26+Ramaze
--------------------------------------------------------------------------------

=== Decoding text from URIs with url_decode

This is simply the reverse operation of `url_encode`, so we will use the output
of the previous example as input.

[source,ruby]
--------------------------------------------------------------------------------
require 'ramaze'

name = Ramaze::Helper::CGI.url_encode('Innate & Ramaze')
# "Innate+%26+Ramaze"
name = Ramaze::Helper::CGI.url_decode(name)
# "Innate & Ramaze"
--------------------------------------------------------------------------------

== Flash helper

The naming of this helper might be confusing at first, it doesn't have anything
to do with Adobe Flash (R).

It provides two methods, `flash` and `flashbox`.

The `flash` method is a shortcut to `Ramaze::Current.session.flash`, you can
find more in-depth information in the chapter about `Ramaze::Session`.


== Link helper

Linking and obtaining routes

== Redirect helper

Redirect or respond immediately

== Render helper

Render other actions

== SendFile helper

Send files with correct mime-type.
