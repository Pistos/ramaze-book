= Configuration

Configuration is a big aspect of Ramaze, although it tries to offer your sane
defaults out of the box, it still gives you many ways to influence just about
every behaviour.

Most commonly, you won't have to configure that much, Ramaze follows the
"convention over configuration" principle to some extent, but never forces a
particular way of doing things on you.

The center of all configuration is in `Ramaze.options`, an instance of
`Ramaze::Options`. The configuration is self-documenting, by requiring a bit of
description when you first define an option.
You may use this also to add custom options to your own application, common
usage of this would be credentials for an administrator, SMTP options for a
mailer, or things like a page title or number of items displayed on the
front-page.

I will first introduce you to some options that are most used in Ramaze,
changing the web-server and port, changing your caching backend, and cookie
expiration times.

There is much more that we don't cover here, I invite you to a short IRB session
that shows you how to find out more.

// TODO: This should be done via XMP...

[source,ruby]
--------------------------------------------------------------------------------
Ramaze.options.each_option{|key, value| puts("%-20s: %s" % [key, value[:doc]]) }
response            : 
setup               : Will send ::setup to each element during Innate::start
cache               : Innate::Cache::Memory
session             : 
log_hub             : 
roots               : The directories this application resides in
helpers_helper      : 
trap                : Trap this signal to issue shutdown, nil/false to disable trap
adapter             : 
views               : Directories containing the view templates
middleware_compiler : The compiler for middleware
app                 : 
prefix              : Prefix used to create relative links
started             : Innate::start will not start an adapter if true
layouts             : Directories containing the layout templates
mode                : Indicates which default middleware to use, (:dev|:live)
publics             : The directories containing static files to be served
--------------------------------------------------------------------------------

Quite the information overload to get started, so we'll pick a few options for
further inspection.

== Basic options

Something you will notice is that some options don't have a documentation, this
is because they were automatically inserted and are actually their own instance
of `Ramaze::Option` living on another class.
So the `:session` lives in `Ramaze::Session::options`, `:adapter` is on
`Ramaze::Adapter::options`, and so on.

[source,ruby]
--------------------------------------------------------------------------------
include::source/configuration/basic/adapter.xmp[tabsize=2]
--------------------------------------------------------------------------------

Now, that was not so bad. How about inspecting some of the options directly on
`Ramaze::options` now.

[source,ruby]
--------------------------------------------------------------------------------
include::source/configuration/basic/ramaze.xmp[tabsize=2]
--------------------------------------------------------------------------------

OK, enough of that, let's see how we can change some of these options:

[source, ruby]
--------------------------------------------------------------------------------
include::source/configuration/basic/change.xmp[tabsize=2]
--------------------------------------------------------------------------------

Not so hard as well.

As you can see, options are laid out in a tree structure, where options can be
nested within options.
Ramaze uses this functionality to keep the configuration for specific parts of
the source close to the source itself, instead of defining everything in one
place and then sending you around hunting for the places where that option might
be used (that was the way we did it before 2009.04).
