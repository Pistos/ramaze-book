# Ramaze::Helper

Helpers are modules for inclusion into controllers or other classes.

## Using a helper


    class MainController < Ramaze::Controller
      helper :formatting

      def index
        number_format(rand)
      end
    end
{:ruby}


## Rules for helpers

Methods are private.

How to create your own helper

Creating helpers is simple.


    module Ramaze
      module Helper
        module SimleyHelper
          FACES = {
            ':)' => '/smilies/smile.gif'
            ';)' => '/smilies/twink.gif'
          }
          REGEX = Regexp.union(*FACES.keys)

          def smile(string)
            string.gsub(REGEX){ FACES[$1] }
          end
        end
      end
    end
{:ruby}


### Exposing methods to routing

By adding an helper module to the Ramaze::Helper::LOOKUP Set it's possible to add the module to the lookup for methods together with the Ramaze::Controller. Conflicts of method names in Helper and Controller will prefer the Controller, following the same rules as Ruby inheritance. 


    module Ramaze
      module Helper
        module Locale
          LOOKUP << self

          def locale(name)
            session[:LOCALE] = name
          end
        end
      end
    end
{:ruby}


In this example we expose the public method Locale#locale (Ruby methods are public by default). So in your application your can just use the helper and when the client visits the /locale/en route the session will reflect this choice.

Please note that this code doesn't include a `redirect_referrer` call since we may be using it within our own codebase in the middle of a method.
