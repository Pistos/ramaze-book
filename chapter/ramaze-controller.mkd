# Ramaze::Controller

## What, exactly, is a Controller anyway?

The first thing you will encounter when starting out with Ramaze is the Controller. This is because the Controller is the central structure in most web applications and for that reason you should know as much as possible about it.

To start out, let's take a look at the basic structure of a usual Controller with a hello world example.

    class MainControler < Ramaze::Controller
      def index
        'Hello, World!'
      end
    end
{:ruby}

So we have a class MainController that inherits from Ramaze::Controller, I won't go into details yet what exactly this inheritance means, but it basically integrates your new class into your application.

What you see next is a method called index, containing a simple String.

To fully understand this snippet we will have to understand the concept of mapping in Ramaze. If you are familiar with other web frameworks, you will know about routing, and for those of you who don't, let me explain routing real quick, since it's the principle applied here as well.

So routing basically means, when you get a request from a client to `/user/songs`, the routing will see if you have defined any routes matching this path and executes whatever you specified as the result.

What Ramaze does with mapping is a little bit more sophisticated in order to lift work off the shoulders of the programmer and only make him do manual routing to refine the results of this automatic procedure.

So given a Controller named UserController, Ramaze will route to it with the path `/user`, UserNameController would be put at `/user_name` and so on. In this case we have picked the only exception, that is MainController and is mapped at `/` by default.

We will see in the next example how to change this default mapping, since defaults may be good, but nothing beats configurability when needed.

## Remapping

In order to change the default mapping, you can simply use the `Controller::map(path, [path2, ...])` method. This also allows you to map one Controller on multiple paths.


    class MainController < Ramaze::Controller
      map '/article'

      def index
        "Hello, World!"
      end
    end
{:ruby}

This example simply shows how you can use the map method, but let's see a nicer way to do the same using the default mapping.


    class ArticleController < Ramaze::Controller
      def index
        "Hello, World!"
      end
    end
{:ruby}

So instead of defining a Controller that is by default mapped to `/` and remapping to `/article`, we can just name it ArticleController and Ramze will take the part of your classes name before `Controller` and convert it to a mapping by doing a simple snake case transformation.

Sticking to this kind of defaults makes your code a lot more readable, as people know which Controller will map to which URL without even checking first.

## Controller class methods

* Controller::startup
* Controller::map
* Controller::at
* Controller::layout
* Controller::template
* Controller::check\_path
* Controller::engine
* Controller::current
* Controller::handle
* Controller::relevant\_ancestors
* Controller::render
